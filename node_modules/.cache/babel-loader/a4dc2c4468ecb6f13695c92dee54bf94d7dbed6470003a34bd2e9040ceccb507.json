{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport useQueryParams from \"./useQueryParams\";\nconst useQueryParam = (name, paramConfig, options) => {\n  const paramConfigMap = useMemo(() => ({\n    [name]: paramConfig != null ? paramConfig : \"inherit\"\n  }), [name, paramConfig]);\n  const [query, setQuery] = useQueryParams(paramConfigMap, options);\n  const decodedValue = query[name];\n  const setValue = useCallback((newValue, updateType) => {\n    if (typeof newValue === \"function\") {\n      return setQuery(latestValues => {\n        const newValueFromLatest = newValue(latestValues[name]);\n        return {\n          [name]: newValueFromLatest\n        };\n      }, updateType);\n    }\n    return setQuery({\n      [name]: newValue\n    }, updateType);\n  }, [name, setQuery]);\n  return [decodedValue, setValue];\n};\nexport { useQueryParam };","map":{"version":3,"names":["useCallback","useMemo","useQueryParams","useQueryParam","name","paramConfig","options","paramConfigMap","query","setQuery","decodedValue","setValue","newValue","updateType","latestValues","newValueFromLatest"],"sources":["/home/remmy/Documents/Development/code/wakuu/frontend/node_modules/use-query-params/src/useQueryParam.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { QueryParamConfig } from 'serialize-query-params';\nimport { QueryParamOptions } from './options';\nimport { UrlUpdateType } from './types';\nimport useQueryParams from './useQueryParams';\n\ntype NewValueType<D> = D | ((latestValue: D) => D);\n\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'pushIn'.\n */\nexport const useQueryParam = <TypeToEncode, TypeFromDecode = TypeToEncode>(\n  name: string,\n  paramConfig?: QueryParamConfig<TypeToEncode, TypeFromDecode>,\n  options?: QueryParamOptions\n): [\n  TypeFromDecode,\n  (newValue: NewValueType<TypeToEncode>, updateType?: UrlUpdateType) => void\n] => {\n  const paramConfigMap = useMemo(\n    () => ({ [name]: paramConfig ?? 'inherit' }),\n    [name, paramConfig]\n  );\n  const [query, setQuery] = useQueryParams(paramConfigMap, options);\n  const decodedValue = query[name];\n  const setValue = useCallback(\n    (newValue: NewValueType<TypeToEncode>, updateType?: UrlUpdateType) => {\n      if (typeof newValue === 'function') {\n        return setQuery((latestValues) => {\n          const newValueFromLatest = (newValue as Function)(latestValues[name]);\n          return { [name]: newValueFromLatest };\n        }, updateType);\n      }\n      return setQuery({ [name]: newValue } as any, updateType);\n    },\n    [name, setQuery]\n  );\n\n  return [decodedValue, setValue];\n};\n"],"mappings":"AAAA,SAASA,WAAA,EAAaC,OAAA,QAAe;AAIrC,OAAOC,cAAA,MAAoB;AAYpB,MAAMC,aAAA,GAAgBA,CAC3BC,IAAA,EACAC,WAAA,EACAC,OAAA,KAIG;EACH,MAAMC,cAAA,GAAiBN,OAAA,CACrB,OAAO;IAAE,CAACG,IAAA,GAAOC,WAAA,WAAAA,WAAA,GAAe;EAAU,IAC1C,CAACD,IAAA,EAAMC,WAAW,EACpB;EACA,MAAM,CAACG,KAAA,EAAOC,QAAQ,IAAIP,cAAA,CAAeK,cAAA,EAAgBD,OAAO;EAChE,MAAMI,YAAA,GAAeF,KAAA,CAAMJ,IAAA;EAC3B,MAAMO,QAAA,GAAWX,WAAA,CACf,CAACY,QAAA,EAAsCC,UAAA,KAA+B;IACpE,IAAI,OAAOD,QAAA,KAAa,YAAY;MAClC,OAAOH,QAAA,CAAUK,YAAA,IAAiB;QAChC,MAAMC,kBAAA,GAAsBH,QAAA,CAAsBE,YAAA,CAAaV,IAAA,CAAK;QACpE,OAAO;UAAE,CAACA,IAAA,GAAOW;QAAmB;MACtC,GAAGF,UAAU;IACf;IACA,OAAOJ,QAAA,CAAS;MAAE,CAACL,IAAA,GAAOQ;IAAS,GAAUC,UAAU;EACzD,GACA,CAACT,IAAA,EAAMK,QAAQ,EACjB;EAEA,OAAO,CAACC,YAAA,EAAcC,QAAQ;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}