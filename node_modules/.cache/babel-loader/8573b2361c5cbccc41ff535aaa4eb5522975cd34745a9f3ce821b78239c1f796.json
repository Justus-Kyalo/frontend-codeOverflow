{"ast":null,"code":"import { StringParam } from \"serialize-query-params\";\nfunction convertInheritedParamStringsToParams(paramConfigMapWithInherit, options) {\n  var _a, _b, _c;\n  const paramConfigMap = {};\n  let hasInherit = false;\n  const hookKeys = Object.keys(paramConfigMapWithInherit);\n  let paramKeys = hookKeys;\n  const includeKnownParams = options.includeKnownParams || options.includeKnownParams !== false && hookKeys.length === 0;\n  if (includeKnownParams) {\n    const knownKeys = Object.keys((_a = options.params) != null ? _a : {});\n    paramKeys.push(...knownKeys);\n  }\n  for (const key of paramKeys) {\n    const param = paramConfigMapWithInherit[key];\n    if (param != null && typeof param === \"object\") {\n      paramConfigMap[key] = param;\n      continue;\n    }\n    hasInherit = true;\n    paramConfigMap[key] = (_c = (_b = options.params) == null ? void 0 : _b[key]) != null ? _c : StringParam;\n  }\n  if (!hasInherit) return paramConfigMapWithInherit;\n  return paramConfigMap;\n}\nfunction extendParamConfigForKeys(baseParamConfigMap, paramKeys, inheritedParams, defaultParam) {\n  var _a;\n  if (!inheritedParams || !paramKeys.length) return baseParamConfigMap;\n  let paramConfigMap = {\n    ...baseParamConfigMap\n  };\n  let hasInherit = false;\n  for (const paramKey of paramKeys) {\n    if (!Object.prototype.hasOwnProperty.call(paramConfigMap, paramKey)) {\n      paramConfigMap[paramKey] = (_a = inheritedParams[paramKey]) != null ? _a : defaultParam;\n      hasInherit = true;\n    }\n  }\n  if (!hasInherit) return baseParamConfigMap;\n  return paramConfigMap;\n}\nexport { convertInheritedParamStringsToParams, extendParamConfigForKeys };","map":{"version":3,"names":["StringParam","convertInheritedParamStringsToParams","paramConfigMapWithInherit","options","_a","_b","_c","paramConfigMap","hasInherit","hookKeys","Object","keys","paramKeys","includeKnownParams","length","knownKeys","params","push","key","param","extendParamConfigForKeys","baseParamConfigMap","inheritedParams","defaultParam","paramKey","prototype","hasOwnProperty","call"],"sources":["/home/remmy/Documents/Development/code/wakuu/frontend/node_modules/use-query-params/src/inheritedParams.ts"],"sourcesContent":["import {\n  QueryParamConfig,\n  QueryParamConfigMap,\n  StringParam,\n} from 'serialize-query-params';\nimport { QueryParamOptions } from './options';\nimport { QueryParamConfigMapWithInherit } from './types';\n\n/**\n * Convert inherit strings from a query param config to actual\n * parameters based on predefined ('inherited') mappings.\n * Defaults to StringParam.\n */\nexport function convertInheritedParamStringsToParams(\n  paramConfigMapWithInherit: QueryParamConfigMapWithInherit,\n  options: QueryParamOptions\n): QueryParamConfigMap {\n  const paramConfigMap: QueryParamConfigMap = {};\n  let hasInherit = false;\n\n  const hookKeys = Object.keys(paramConfigMapWithInherit);\n  let paramKeys = hookKeys;\n\n  // include known params if asked for explicitly, or no params were configured and we didn't\n  // explicitly say not to\n  const includeKnownParams =\n    options.includeKnownParams ||\n    (options.includeKnownParams !== false && hookKeys.length === 0);\n\n  if (includeKnownParams) {\n    const knownKeys = Object.keys(options.params ?? {});\n    paramKeys.push(...knownKeys);\n  }\n\n  for (const key of paramKeys) {\n    const param = paramConfigMapWithInherit[key];\n    // does it have an existing parameter definition? use it\n    if (param != null && typeof param === 'object') {\n      paramConfigMap[key] = param;\n      continue;\n    }\n\n    // otherwise, we have to inherit or use the default\n    hasInherit = true;\n\n    // default is StringParam\n    paramConfigMap[key] = options.params?.[key] ?? StringParam;\n  }\n\n  // if we didn't inherit anything, just return the input\n  if (!hasInherit) return paramConfigMapWithInherit as QueryParamConfigMap;\n\n  return paramConfigMap;\n}\n\n/**\n * Extends a config to include params for all specified keys,\n * defaulting to StringParam if not found in the inheritedParams\n * map.\n */\nexport function extendParamConfigForKeys(\n  baseParamConfigMap: QueryParamConfigMap,\n  paramKeys: string[],\n  inheritedParams?: QueryParamOptions['params'] | undefined,\n  defaultParam?: QueryParamConfig<any> | undefined\n) {\n  // if we aren't inheriting anything or there are no params, return the input\n  if (!inheritedParams || !paramKeys.length) return baseParamConfigMap;\n\n  let paramConfigMap = { ...baseParamConfigMap };\n  let hasInherit = false;\n  for (const paramKey of paramKeys) {\n    // if it is missing a parameter, fill it in\n    if (!Object.prototype.hasOwnProperty.call(paramConfigMap, paramKey)) {\n      paramConfigMap[paramKey] = inheritedParams[paramKey] ?? defaultParam;\n      hasInherit = true;\n    }\n  }\n\n  if (!hasInherit) return baseParamConfigMap;\n  return paramConfigMap;\n}\n"],"mappings":"AAAA,SAGEA,WAAA,QACK;AASA,SAASC,qCACdC,yBAAA,EACAC,OAAA,EACqB;EAhBvB,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA;EAiBE,MAAMC,cAAA,GAAsC,CAAC;EAC7C,IAAIC,UAAA,GAAa;EAEjB,MAAMC,QAAA,GAAWC,MAAA,CAAOC,IAAA,CAAKT,yBAAyB;EACtD,IAAIU,SAAA,GAAYH,QAAA;EAIhB,MAAMI,kBAAA,GACJV,OAAA,CAAQU,kBAAA,IACPV,OAAA,CAAQU,kBAAA,KAAuB,SAASJ,QAAA,CAASK,MAAA,KAAW;EAE/D,IAAID,kBAAA,EAAoB;IACtB,MAAME,SAAA,GAAYL,MAAA,CAAOC,IAAA,EAAKP,EAAA,GAAAD,OAAA,CAAQa,MAAA,KAAR,OAAAZ,EAAA,GAAkB,CAAC,CAAC;IAClDQ,SAAA,CAAUK,IAAA,CAAK,GAAGF,SAAS;EAC7B;EAEA,WAAWG,GAAA,IAAON,SAAA,EAAW;IAC3B,MAAMO,KAAA,GAAQjB,yBAAA,CAA0BgB,GAAA;IAExC,IAAIC,KAAA,IAAS,QAAQ,OAAOA,KAAA,KAAU,UAAU;MAC9CZ,cAAA,CAAeW,GAAA,IAAOC,KAAA;MACtB;IACF;IAGAX,UAAA,GAAa;IAGbD,cAAA,CAAeW,GAAA,KAAOZ,EAAA,IAAAD,EAAA,GAAAF,OAAA,CAAQa,MAAA,KAAR,gBAAAX,EAAA,CAAiBa,GAAA,MAAjB,OAAAZ,EAAA,GAAyBN,WAAA;EACjD;EAGA,IAAI,CAACQ,UAAA,EAAY,OAAON,yBAAA;EAExB,OAAOK,cAAA;AACT;AAOO,SAASa,yBACdC,kBAAA,EACAT,SAAA,EACAU,eAAA,EACAC,YAAA,EACA;EAjEF,IAAAnB,EAAA;EAmEE,IAAI,CAACkB,eAAA,IAAmB,CAACV,SAAA,CAAUE,MAAA,EAAQ,OAAOO,kBAAA;EAElD,IAAId,cAAA,GAAiB;IAAE,GAAGc;EAAmB;EAC7C,IAAIb,UAAA,GAAa;EACjB,WAAWgB,QAAA,IAAYZ,SAAA,EAAW;IAEhC,IAAI,CAACF,MAAA,CAAOe,SAAA,CAAUC,cAAA,CAAeC,IAAA,CAAKpB,cAAA,EAAgBiB,QAAQ,GAAG;MACnEjB,cAAA,CAAeiB,QAAA,KAAYpB,EAAA,GAAAkB,eAAA,CAAgBE,QAAA,MAAhB,OAAApB,EAAA,GAA6BmB,YAAA;MACxDf,UAAA,GAAa;IACf;EACF;EAEA,IAAI,CAACA,UAAA,EAAY,OAAOa,kBAAA;EACxB,OAAOd,cAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}