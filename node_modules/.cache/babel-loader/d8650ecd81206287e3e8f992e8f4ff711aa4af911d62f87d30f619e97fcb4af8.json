{"ast":null,"code":"function withDefault(param, defaultValue) {\n  let includeNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const decodeWithDefault = function () {\n    const decodedValue = param.decode(...arguments);\n    if (decodedValue === void 0) {\n      return defaultValue;\n    }\n    if (includeNull) {\n      if (decodedValue === null) {\n        return defaultValue;\n      } else {\n        return decodedValue;\n      }\n    }\n    return decodedValue;\n  };\n  return {\n    ...param,\n    default: defaultValue,\n    decode: decodeWithDefault\n  };\n}\nvar withDefault_default = withDefault;\nexport { withDefault_default as default, withDefault };","map":{"version":3,"names":["withDefault","param","defaultValue","includeNull","arguments","length","undefined","decodeWithDefault","decodedValue","decode","default","withDefault_default"],"sources":["/home/john/development/frontend/node_modules/serialize-query-params/src/withDefault.ts"],"sourcesContent":["import { QueryParamConfig } from './types';\n\n/**\n * Wrap a given parameter with a default value when undefined or null (optionally, default includes null)\n * @param param QueryParamConfig - { encode, decode} to serialize a parameter\n * @param defaultValue A default value\n * @param includeNull\n */\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull?: false | undefined\n): QueryParamConfig<D, Exclude<D2, undefined> | DefaultType>;\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull?: true\n): QueryParamConfig<D, Exclude<D2, null | undefined> | DefaultType>;\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull: boolean = true\n): QueryParamConfig<D, any | DefaultType> {\n  const decodeWithDefault = (\n    ...args: Parameters<typeof param.decode>\n  ): Exclude<D2, null | undefined> | Exclude<D2, undefined> | DefaultType => {\n    const decodedValue = param.decode(...args);\n\n    if (decodedValue === undefined) {\n      return defaultValue;\n    }\n    if (includeNull) {\n      if (decodedValue === null) {\n        return defaultValue;\n      } else {\n        return decodedValue as Exclude<D2, undefined>;\n      }\n    }\n\n    return decodedValue as Exclude<D2, undefined | null>;\n  };\n\n  // note we add `default` into the param for other tools to introspect\n  return { ...param, default: defaultValue, decode: decodeWithDefault };\n}\nexport default withDefault;\n"],"mappings":"AAkBO,SAASA,YACdC,KAAA,EACAC,YAAA,EAEwC;EAAA,IADxCC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB;EAEvB,MAAMG,iBAAA,GAAoB,SAAAA,CAAA,EAEiD;IACzE,MAAMC,YAAA,GAAeP,KAAA,CAAMQ,MAAA,CAAO,GAAAL,SAAO;IAEzC,IAAII,YAAA,KAAiB,QAAW;MAC9B,OAAON,YAAA;IACT;IACA,IAAIC,WAAA,EAAa;MACf,IAAIK,YAAA,KAAiB,MAAM;QACzB,OAAON,YAAA;MACT,OAAO;QACL,OAAOM,YAAA;MACT;IACF;IAEA,OAAOA,YAAA;EACT;EAGA,OAAO;IAAE,GAAGP,KAAA;IAAOS,OAAA,EAASR,YAAA;IAAcO,MAAA,EAAQF;EAAkB;AACtE;AACA,IAAOI,mBAAA,GAAQX,WAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}