{"ast":null,"code":"import csrfFetch from \"./csrf.js\";\nconst SET_CURRENT_USER = 'session/SET_CURRENT_USER';\nconst REMOVE_CURRENT_USER = 'session/REMOVE_CURRENT_USER';\nconst setCurrentUser = user => ({\n  type: SET_CURRENT_USER,\n  user\n});\nconst removeCurrentUser = () => ({\n  type: REMOVE_CURRENT_USER\n});\nconst storeCSRFToken = res => {\n  const csrfToken = res.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n  } else {\n    sessionStorage.removeItem(\"currentUser\");\n  }\n};\nexport const login = user => async dispatch => {\n  const {\n    email,\n    password\n  } = user;\n  const res = await csrfFetch(\"api/session\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\nexport const logout = () => async dispatch => {\n  const res = await csrfFetch(\"/api/session\", {\n    method: \"DELETE\"\n  });\n  storeCurrentUser(null);\n  dispatch(removeCurrentUser());\n  return res;\n};\nexport const signup = user => async dispatch => {\n  const {\n    email,\n    password,\n    display_name\n  } = user;\n  const res = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password,\n      display_name\n    })\n  });\n  const data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\nexport const restoreSession = () => async dispatch => {\n  const res = await csrfFetch(\"/api/session\");\n  storeCSRFToken(res);\n  const data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...state\n  };\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      newState.user = action.user;\n      return newState;\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","setCurrentUser","user","type","removeCurrentUser","storeCSRFToken","res","csrfToken","headers","get","sessionStorage","setItem","storeCurrentUser","JSON","stringify","removeItem","login","dispatch","email","password","method","body","data","json","logout","signup","display_name","restoreSession","initialState","parse","getItem","sessionReducer","state","arguments","length","undefined","action","newState"],"sources":["/home/john/development/frontend-codeOverflow/src/store/session.js"],"sourcesContent":["import csrfFetch from \"./csrf.js\";\n\nconst SET_CURRENT_USER = 'session/SET_CURRENT_USER';\nconst REMOVE_CURRENT_USER = 'session/REMOVE_CURRENT_USER';\n\nconst setCurrentUser = (user) => ({\n  type: SET_CURRENT_USER,\n  user\n});\n\nconst removeCurrentUser = () => ({\n  type: REMOVE_CURRENT_USER\n});\n\nconst storeCSRFToken = (res) => {\n  const csrfToken = res.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\n\nconst storeCurrentUser = (user) => {\n  if (user) {\n    sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n  } else {\n    sessionStorage.removeItem(\"currentUser\");\n  }\n};\n\nexport const login = (user) => async (dispatch) => {\n  const { email, password } = user;\n  const res = await csrfFetch(\"api/session\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password })\n  });\n  const data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\n\nexport const logout = () => async (dispatch) => {\n    const res = await csrfFetch(\"/api/session\", {\n      method: \"DELETE\"\n    });\n    storeCurrentUser(null);\n    dispatch(removeCurrentUser());\n    return res;\n};\n\nexport const signup = (user) => async (dispatch) => {\n  const { email, password, display_name } = user;\n  const res = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password,\n      display_name\n    })\n  });\n  const data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\n\nexport const restoreSession = () => async (dispatch) => {\n    const res = await csrfFetch(\"/api/session\");\n    storeCSRFToken(res);\n    const data = await res.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return res;\n};\n\nconst initialState = { \n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\n\nconst sessionReducer = (state = initialState, action) => {\n  const newState = {...state}\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      newState.user = action.user;\n      return newState;\n    case REMOVE_CURRENT_USER:\n      return { ...state, user: null };\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}