{"ast":null,"code":"import * as Serialize from \"./serialize\";\nconst StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\nconst createEnumParam = enumValues => ({\n  encode: Serialize.encodeString,\n  decode: input => Serialize.decodeEnum(input, enumValues)\n});\nconst createEnumArrayParam = enumValues => ({\n  encode: text => Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: input => Serialize.decodeArrayEnum(input, enumValues)\n});\nconst createEnumDelimitedArrayParam = function (enumValues) {\n  let entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  return {\n    encode: text => Serialize.encodeDelimitedArray(text == null || Array.isArray(text) ? text : [text], entrySeparator),\n    decode: input => Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator)\n  };\n};\nconst NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\nconst ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\nconst ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\nconst NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\nconst JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\nconst DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n    return valueA.getFullYear() === valueB.getFullYear() && valueA.getMonth() === valueB.getMonth() && valueA.getDate() === valueB.getDate();\n  }\n};\nconst DateTimeParam = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n    return valueA.valueOf() === valueB.valueOf();\n  }\n};\nconst BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\nconst NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\nconst DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\nconst DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};\nexport { ArrayParam, BooleanParam, DateParam, DateTimeParam, DelimitedArrayParam, DelimitedNumericArrayParam, JsonParam, NumberParam, NumericArrayParam, NumericObjectParam, ObjectParam, StringParam, createEnumArrayParam, createEnumDelimitedArrayParam, createEnumParam };","map":{"version":3,"names":["Serialize","StringParam","encode","encodeString","decode","decodeString","createEnumParam","enumValues","input","decodeEnum","createEnumArrayParam","text","encodeArray","Array","isArray","decodeArrayEnum","createEnumDelimitedArrayParam","entrySeparator","arguments","length","undefined","encodeDelimitedArray","decodeDelimitedArrayEnum","NumberParam","encodeNumber","decodeNumber","ObjectParam","encodeObject","decodeObject","ArrayParam","decodeArray","NumericArrayParam","encodeNumericArray","decodeNumericArray","JsonParam","encodeJson","decodeJson","DateParam","encodeDate","decodeDate","equals","valueA","valueB","getFullYear","getMonth","getDate","DateTimeParam","encodeDateTime","decodeDateTime","valueOf","BooleanParam","encodeBoolean","decodeBoolean","NumericObjectParam","encodeNumericObject","decodeNumericObject","DelimitedArrayParam","decodeDelimitedArray","DelimitedNumericArrayParam","encodeDelimitedNumericArray","decodeDelimitedNumericArray"],"sources":["/home/remmy/Documents/Development/code/wakuu/frontend/node_modules/serialize-query-params/src/params.ts"],"sourcesContent":["import * as Serialize from './serialize';\nimport { QueryParamConfig } from './types';\n\n/**\n * String values\n */\nexport const StringParam: QueryParamConfig<\n  string | null | undefined,\n  string | null | undefined\n> = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString,\n};\n\n/**\n * String enum\n */\nexport const createEnumParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T | null | undefined, T | null | undefined> => ({\n  encode: Serialize.encodeString,\n  decode: (input) => Serialize.decodeEnum(input, enumValues),\n});\n\n/**\n * Array enum\n */\nexport const createEnumArrayParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: (input) => Serialize.decodeArrayEnum(input, enumValues),\n});\n\n/**\n * Array delimited enum\n */\nexport const createEnumDelimitedArrayParam = <T extends string>(\n  enumValues: T[],\n  entrySeparator = '_'\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeDelimitedArray(\n      text == null || Array.isArray(text) ? text : [text],\n      entrySeparator\n    ),\n  decode: (input) =>\n    Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator),\n});\n\n/**\n * Numbers (integers or floats)\n */\nexport const NumberParam: QueryParamConfig<\n  number | null | undefined,\n  number | null | undefined\n> = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber,\n};\n\n/**\n * For flat objects where values are strings\n */\nexport const ObjectParam: QueryParamConfig<\n  { [key: string]: string | undefined } | null | undefined,\n  { [key: string]: string | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const ArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const NumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray,\n};\n\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport const JsonParam: QueryParamConfig<any, any> = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson,\n};\n\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport const DateParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    // ignore time of day\n    return (\n      valueA.getFullYear() === valueB.getFullYear() &&\n      valueA.getMonth() === valueB.getMonth() &&\n      valueA.getDate() === valueB.getDate()\n    );\n  },\n};\n\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport const DateTimeParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    return valueA.valueOf() === valueB.valueOf();\n  },\n};\n\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport const BooleanParam: QueryParamConfig<\n  boolean | null | undefined,\n  boolean | null | undefined\n> = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean,\n};\n\n/**\n * For flat objects where the values are numbers\n */\nexport const NumericObjectParam: QueryParamConfig<\n  { [key: string]: number | null | undefined } | null | undefined,\n  { [key: string]: number | null | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const DelimitedArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray,\n};\n\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport const DelimitedNumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray,\n};\n"],"mappings":"AAAA,YAAYA,SAAA,MAAe;AAMpB,MAAMC,WAAA,GAGT;EACFC,MAAA,EAAQF,SAAA,CAAUG,YAAA;EAClBC,MAAA,EAAQJ,SAAA,CAAUK;AACpB;AAKO,MAAMC,eAAA,GACXC,UAAA,KACkE;EAClEL,MAAA,EAAQF,SAAA,CAAUG,YAAA;EAClBC,MAAA,EAASI,KAAA,IAAUR,SAAA,CAAUS,UAAA,CAAWD,KAAA,EAAOD,UAAU;AAC3D;AAKO,MAAMG,oBAAA,GACXH,UAAA,KACsE;EACtEL,MAAA,EAASS,IAAA,IACPX,SAAA,CAAUY,WAAA,CAAYD,IAAA,IAAQ,QAAQE,KAAA,CAAMC,OAAA,CAAQH,IAAI,IAAIA,IAAA,GAAO,CAACA,IAAI,CAAC;EAC3EP,MAAA,EAASI,KAAA,IAAUR,SAAA,CAAUe,eAAA,CAAgBP,KAAA,EAAOD,UAAU;AAChE;AAKO,MAAMS,6BAAA,GAAgC,SAAAA,CAC3CT,UAAA;EAAA,IACAU,cAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiB;EAAA,OACqD;IACtEhB,MAAA,EAASS,IAAA,IACPX,SAAA,CAAUqB,oBAAA,CACRV,IAAA,IAAQ,QAAQE,KAAA,CAAMC,OAAA,CAAQH,IAAI,IAAIA,IAAA,GAAO,CAACA,IAAI,GAClDM,cAAA,CACF;IACFb,MAAA,EAASI,KAAA,IACPR,SAAA,CAAUsB,wBAAA,CAAyBd,KAAA,EAAOD,UAAA,EAAYU,cAAc;EACxE;AAAA;AAKO,MAAMM,WAAA,GAGT;EACFrB,MAAA,EAAQF,SAAA,CAAUwB,YAAA;EAClBpB,MAAA,EAAQJ,SAAA,CAAUyB;AACpB;AAKO,MAAMC,WAAA,GAGT;EACFxB,MAAA,EAAQF,SAAA,CAAU2B,YAAA;EAClBvB,MAAA,EAAQJ,SAAA,CAAU4B;AACpB;AAKO,MAAMC,UAAA,GAGT;EACF3B,MAAA,EAAQF,SAAA,CAAUY,WAAA;EAClBR,MAAA,EAAQJ,SAAA,CAAU8B;AACpB;AAKO,MAAMC,iBAAA,GAGT;EACF7B,MAAA,EAAQF,SAAA,CAAUgC,kBAAA;EAClB5B,MAAA,EAAQJ,SAAA,CAAUiC;AACpB;AAKO,MAAMC,SAAA,GAAwC;EACnDhC,MAAA,EAAQF,SAAA,CAAUmC,UAAA;EAClB/B,MAAA,EAAQJ,SAAA,CAAUoC;AACpB;AAKO,MAAMC,SAAA,GAGT;EACFnC,MAAA,EAAQF,SAAA,CAAUsC,UAAA;EAClBlC,MAAA,EAAQJ,SAAA,CAAUuC,UAAA;EAClBC,MAAA,EAAQA,CACNC,MAAA,EACAC,MAAA,KACG;IACH,IAAID,MAAA,KAAWC,MAAA,EAAQ,OAAO;IAC9B,IAAID,MAAA,IAAU,QAAQC,MAAA,IAAU,MAAM,OAAOD,MAAA,KAAWC,MAAA;IAGxD,OACED,MAAA,CAAOE,WAAA,EAAY,KAAMD,MAAA,CAAOC,WAAA,EAAY,IAC5CF,MAAA,CAAOG,QAAA,EAAS,KAAMF,MAAA,CAAOE,QAAA,EAAS,IACtCH,MAAA,CAAOI,OAAA,EAAQ,KAAMH,MAAA,CAAOG,OAAA,EAAQ;EAExC;AACF;AAKO,MAAMC,aAAA,GAGT;EACF5C,MAAA,EAAQF,SAAA,CAAU+C,cAAA;EAClB3C,MAAA,EAAQJ,SAAA,CAAUgD,cAAA;EAClBR,MAAA,EAAQA,CACNC,MAAA,EACAC,MAAA,KACG;IACH,IAAID,MAAA,KAAWC,MAAA,EAAQ,OAAO;IAC9B,IAAID,MAAA,IAAU,QAAQC,MAAA,IAAU,MAAM,OAAOD,MAAA,KAAWC,MAAA;IAExD,OAAOD,MAAA,CAAOQ,OAAA,EAAQ,KAAMP,MAAA,CAAOO,OAAA,EAAQ;EAC7C;AACF;AAKO,MAAMC,YAAA,GAGT;EACFhD,MAAA,EAAQF,SAAA,CAAUmD,aAAA;EAClB/C,MAAA,EAAQJ,SAAA,CAAUoD;AACpB;AAKO,MAAMC,kBAAA,GAGT;EACFnD,MAAA,EAAQF,SAAA,CAAUsD,mBAAA;EAClBlD,MAAA,EAAQJ,SAAA,CAAUuD;AACpB;AAKO,MAAMC,mBAAA,GAGT;EACFtD,MAAA,EAAQF,SAAA,CAAUqB,oBAAA;EAClBjB,MAAA,EAAQJ,SAAA,CAAUyD;AACpB;AAKO,MAAMC,0BAAA,GAGT;EACFxD,MAAA,EAAQF,SAAA,CAAU2D,2BAAA;EAClBvD,MAAA,EAAQJ,SAAA,CAAU4D;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}