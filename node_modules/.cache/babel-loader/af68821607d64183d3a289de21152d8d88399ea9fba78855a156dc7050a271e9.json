{"ast":null,"code":"function decodeQueryParams(paramConfigMap, encodedQuery) {\n  const decodedQuery = {};\n  const paramNames = Object.keys(paramConfigMap);\n  for (const encodedKey of Object.keys(encodedQuery)) {\n    if (paramConfigMap[encodedKey] == null) {\n      paramNames.push(encodedKey);\n    }\n  }\n  for (const paramName of paramNames) {\n    const encodedValue = encodedQuery[paramName];\n    if (!paramConfigMap[paramName]) {\n      if (true) {\n        console.warn(`Passing through parameter ${paramName} during decoding since it was not configured.`);\n      }\n      decodedQuery[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n    }\n  }\n  return decodedQuery;\n}\nexport { decodeQueryParams };","map":{"version":3,"names":["decodeQueryParams","paramConfigMap","encodedQuery","decodedQuery","paramNames","Object","keys","encodedKey","push","paramName","encodedValue","console","warn","decode"],"sources":["/home/remmy/Documents/Development/code/wakuu/frontend/node_modules/serialize-query-params/src/decodeQueryParams.ts"],"sourcesContent":["import { DecodedValueMap, QueryParamConfigMap, EncodedValueMap } from './types';\n\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams<QPCMap extends QueryParamConfigMap>(\n  paramConfigMap: QPCMap,\n  encodedQuery: Partial<EncodedValueMap<QPCMap>>\n): Partial<DecodedValueMap<QPCMap>> {\n  const decodedQuery: Partial<DecodedValueMap<QPCMap>> = {};\n\n  // iterate over all keys in the config (#30)\n  const paramNames = Object.keys(paramConfigMap);\n\n  // ensure any non configured keys that are in the URL are also included\n  for (const encodedKey of Object.keys(encodedQuery)) {\n    if (paramConfigMap[encodedKey] == null) {\n      paramNames.push(encodedKey);\n    }\n  }\n\n  for (const paramName of paramNames) {\n    const encodedValue = encodedQuery[paramName];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          `Passing through parameter ${paramName} during decoding since it was not configured.`\n        );\n      }\n\n      // NOTE: we could just not include it, but it is probably convenient to have\n      // it default to be a string type.\n      (decodedQuery as any)[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName as keyof QPCMap] = paramConfigMap[\n        paramName\n      ].decode(encodedValue as string | (string | null)[] | null);\n    }\n  }\n\n  return decodedQuery;\n}\n"],"mappings":"AASO,SAASA,kBACdC,cAAA,EACAC,YAAA,EACkC;EAClC,MAAMC,YAAA,GAAiD,CAAC;EAGxD,MAAMC,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKL,cAAc;EAG7C,WAAWM,UAAA,IAAcF,MAAA,CAAOC,IAAA,CAAKJ,YAAY,GAAG;IAClD,IAAID,cAAA,CAAeM,UAAA,KAAe,MAAM;MACtCH,UAAA,CAAWI,IAAA,CAAKD,UAAU;IAC5B;EACF;EAEA,WAAWE,SAAA,IAAaL,UAAA,EAAY;IAClC,MAAMM,YAAA,GAAeR,YAAA,CAAaO,SAAA;IAElC,IAAI,CAACR,cAAA,CAAeQ,SAAA,GAAY;MAC9B,IAAI,MAAwC;QAC1CE,OAAA,CAAQC,IAAA,CACN,6BAA6BH,SAAA,gDAC/B;MACF;MAICN,YAAA,CAAqBM,SAAA,IAAaC,YAAA;IACrC,OAAO;MACLP,YAAA,CAAaM,SAAA,IAA6BR,cAAA,CACxCQ,SAAA,EACAI,MAAA,CAAOH,YAAiD;IAC5D;EACF;EAEA,OAAOP,YAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}