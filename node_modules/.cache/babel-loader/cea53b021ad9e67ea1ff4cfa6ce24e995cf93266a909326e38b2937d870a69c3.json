{"ast":null,"code":"import { searchStringToObject, objectToSearchString } from \"serialize-query-params\";\nconst defaultOptions = {\n  searchStringToObject,\n  objectToSearchString,\n  updateType: \"pushIn\",\n  includeKnownParams: void 0,\n  includeAllParams: false,\n  removeDefaultsFromUrl: false,\n  enableBatching: false,\n  skipUpdateWhenNoChange: true\n};\nfunction mergeOptions(parentOptions, currOptions) {\n  if (currOptions == null) {\n    currOptions = {};\n  }\n  const merged = {\n    ...parentOptions,\n    ...currOptions\n  };\n  if (currOptions.params && parentOptions.params) {\n    merged.params = {\n      ...parentOptions.params,\n      ...currOptions.params\n    };\n  }\n  return merged;\n}\nexport { defaultOptions, mergeOptions };","map":{"version":3,"names":["searchStringToObject","objectToSearchString","defaultOptions","updateType","includeKnownParams","includeAllParams","removeDefaultsFromUrl","enableBatching","skipUpdateWhenNoChange","mergeOptions","parentOptions","currOptions","merged","params"],"sources":["/home/remmy/Documents/Development/code/phase-5/frontend-codeOverflow/node_modules/use-query-params/src/options.ts"],"sourcesContent":["import {\n  EncodedQuery,\n  QueryParamConfigMap,\n  searchStringToObject,\n  objectToSearchString,\n} from 'serialize-query-params';\nimport { UrlUpdateType } from './types';\n\nexport const defaultOptions: QueryParamOptionsWithRequired = {\n  searchStringToObject: searchStringToObject,\n  objectToSearchString: objectToSearchString,\n  updateType: 'pushIn',\n  includeKnownParams: undefined,\n  includeAllParams: false,\n  removeDefaultsFromUrl: false,\n  enableBatching: false,\n  skipUpdateWhenNoChange: true,\n};\n\nexport interface QueryParamOptions {\n  searchStringToObject?: (searchString: string) => EncodedQuery;\n  objectToSearchString?: (encodedParams: EncodedQuery) => string;\n  updateType?: UrlUpdateType;\n  includeKnownParams?: boolean;\n  includeAllParams?: boolean;\n  /** whether sets that result in no change to the location search string should be ignored (default: true) */\n  skipUpdateWhenNoChange?: boolean;\n  params?: QueryParamConfigMap;\n\n  /** when a value equals its default, do not encode it in the URL when updating */\n  removeDefaultsFromUrl?: boolean;\n\n  /**\n   * @experimental this is an experimental option to combine multiple `set` calls\n   * into a single URL update.\n   */\n  enableBatching?: boolean;\n}\n\ntype RequiredOptions = 'searchStringToObject' | 'objectToSearchString';\nexport type QueryParamOptionsWithRequired = Required<\n  Pick<QueryParamOptions, RequiredOptions>\n> &\n  Omit<QueryParamOptions, RequiredOptions>;\n\nexport function mergeOptions(\n  parentOptions: QueryParamOptionsWithRequired,\n  currOptions: QueryParamOptions | null | undefined\n): QueryParamOptionsWithRequired {\n  if (currOptions == null) {\n    currOptions = {};\n  }\n\n  const merged = { ...parentOptions, ...currOptions };\n\n  // deep merge param objects\n  if (currOptions.params && parentOptions.params) {\n    merged.params = { ...parentOptions.params, ...currOptions.params };\n  }\n\n  return merged;\n}\n"],"mappings":"AAAA,SAGEA,oBAAA,EACAC,oBAAA,QACK;AAGA,MAAMC,cAAA,GAAgD;EAC3DF,oBAAA;EACAC,oBAAA;EACAE,UAAA,EAAY;EACZC,kBAAA,EAAoB;EACpBC,gBAAA,EAAkB;EAClBC,qBAAA,EAAuB;EACvBC,cAAA,EAAgB;EAChBC,sBAAA,EAAwB;AAC1B;AA4BO,SAASC,aACdC,aAAA,EACAC,WAAA,EAC+B;EAC/B,IAAIA,WAAA,IAAe,MAAM;IACvBA,WAAA,GAAc,CAAC;EACjB;EAEA,MAAMC,MAAA,GAAS;IAAE,GAAGF,aAAA;IAAe,GAAGC;EAAY;EAGlD,IAAIA,WAAA,CAAYE,MAAA,IAAUH,aAAA,CAAcG,MAAA,EAAQ;IAC9CD,MAAA,CAAOC,MAAA,GAAS;MAAE,GAAGH,aAAA,CAAcG,MAAA;MAAQ,GAAGF,WAAA,CAAYE;IAAO;EACnE;EAEA,OAAOD,MAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}