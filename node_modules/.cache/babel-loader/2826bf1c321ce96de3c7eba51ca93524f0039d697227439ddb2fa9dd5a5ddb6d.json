{"ast":null,"code":"import shallowEqual from \"./shallowEqual\";\nimport { deserializeUrlNameMap } from \"./urlName\";\nlet cachedSearchString;\nlet cachedUrlNameMapString;\nlet cachedSearchStringToObjectFn;\nlet cachedParsedQuery = {};\nconst memoSearchStringToObject = (searchStringToObject, searchString, urlNameMapStr) => {\n  if (cachedSearchString === searchString && cachedSearchStringToObjectFn === searchStringToObject && cachedUrlNameMapString === urlNameMapStr) {\n    return cachedParsedQuery;\n  }\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString != null ? searchString : \"\");\n  cachedUrlNameMapString = urlNameMapStr;\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    if (urlNameMap == null ? void 0 : urlNameMap[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\nexport { memoSearchStringToObject };","map":{"version":3,"names":["shallowEqual","deserializeUrlNameMap","cachedSearchString","cachedUrlNameMapString","cachedSearchStringToObjectFn","cachedParsedQuery","memoSearchStringToObject","searchStringToObject","searchString","urlNameMapStr","newParsedQuery","urlNameMap","key","value","Object","entries","oldValue"],"sources":["/home/remmy/Documents/Development/code/wakuu/frontend/node_modules/use-query-params/src/memoSearchStringToObject.ts"],"sourcesContent":["import { EncodedQuery } from 'serialize-query-params';\nimport shallowEqual from './shallowEqual';\nimport { deserializeUrlNameMap } from './urlName';\n\nlet cachedSearchString: string | undefined;\nlet cachedUrlNameMapString: string | undefined;\nlet cachedSearchStringToObjectFn:\n  | ((searchString: string) => EncodedQuery)\n  | undefined;\nlet cachedParsedQuery: EncodedQuery = {};\n\n/**\n * cached conversion of ?foo=1&bar=2 to { foo: '1', bar: '2' }\n */\nexport const memoSearchStringToObject = (\n  searchStringToObject: (searchString: string) => EncodedQuery,\n  searchString?: string | undefined,\n  /** optionally provide a mapping string to handle renames via `urlName`\n   * mapping are separated by \\n and mappings are urlName\\0paramName\n   */\n  urlNameMapStr?: string | undefined\n) => {\n  // if we have a cached version, just return it\n  if (\n    cachedSearchString === searchString &&\n    cachedSearchStringToObjectFn === searchStringToObject &&\n    cachedUrlNameMapString === urlNameMapStr\n  ) {\n    return cachedParsedQuery;\n  }\n\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString ?? '');\n  cachedUrlNameMapString = urlNameMapStr;\n\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n\n  // keep old values for keys if they are the same\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    // handle url name mapping\n    if (urlNameMap?.[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\n"],"mappings":"AACA,OAAOA,YAAA,MAAkB;AACzB,SAASC,qBAAA,QAA6B;AAEtC,IAAIC,kBAAA;AACJ,IAAIC,sBAAA;AACJ,IAAIC,4BAAA;AAGJ,IAAIC,iBAAA,GAAkC,CAAC;AAKhC,MAAMC,wBAAA,GAA2BA,CACtCC,oBAAA,EACAC,YAAA,EAIAC,aAAA,KACG;EAEH,IACEP,kBAAA,KAAuBM,YAAA,IACvBJ,4BAAA,KAAiCG,oBAAA,IACjCJ,sBAAA,KAA2BM,aAAA,EAC3B;IACA,OAAOJ,iBAAA;EACT;EAEAH,kBAAA,GAAqBM,YAAA;EACrBJ,4BAAA,GAA+BG,oBAAA;EAC/B,MAAMG,cAAA,GAAiBH,oBAAA,CAAqBC,YAAA,WAAAA,YAAA,GAAgB,EAAE;EAC9DL,sBAAA,GAAyBM,aAAA;EAEzB,MAAME,UAAA,GAAaV,qBAAA,CAAsBQ,aAAa;EAGtD,SAAS,CAACG,GAAA,EAAKC,KAAK,KAAKC,MAAA,CAAOC,OAAA,CAAQL,cAAc,GAAG;IAEvD,IAAIC,UAAA,oBAAAA,UAAA,CAAaC,GAAA,GAAM;MACrB,OAAOF,cAAA,CAAeE,GAAA;MACtBA,GAAA,GAAMD,UAAA,CAAWC,GAAA;MACjBF,cAAA,CAAeE,GAAA,IAAOC,KAAA;IACxB;IAEA,MAAMG,QAAA,GAAWX,iBAAA,CAAkBO,GAAA;IACnC,IAAIZ,YAAA,CAAaa,KAAA,EAAOG,QAAQ,GAAG;MACjCN,cAAA,CAAeE,GAAA,IAAOI,QAAA;IACxB;EACF;EAEAX,iBAAA,GAAoBK,cAAA;EACpB,OAAOA,cAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}